#!/bin/bash

verifyJDK() {
    if [[ -n "$JAVA_HOME" ]] && [[ -x "$JAVA_HOME/bin/java" ]] && [[ -x "$JAVA_HOME/bin/javac" ]];  then
	_java="$JAVA_HOME/bin/java"
    elif type -p java; then
	echo "fatal: you want to set the environment variable JAVA_HOME to point to jdk installation path."
	echo "please try installing jdk 1.8 or above before running defexts."
	exit 1
    else
	echo "fatal: no jdk installed."
	echo "please try installing jdk 1.8 or above before running defexts."
	exit 1
    fi
    
    if [[ "$_java" ]]; then
	version=$("$_java" -version 2>&1 | awk -F '"' '/version/ {print $2}')
	if [[ "$version" < "1.8" ]]; then
            echo "jdk version $version detected"
            echo "fatal: we require jdk version 1.8 or higher."
	    echo "please try installing jdk 1.8 or above before installing defeXts."
	    exit 1
	fi
    fi
}

verifyJDK
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"
if [ "$#" -lt 1 ]; then
    echo "fatal: too few parameters; the name of dataset expected"
    echo "As the first parameter, you can use:"
    echo "     -k or --kotlin to access Kotlin dataset."
    echo "     -g or --groovy to access Groovy dataset."
    exit 1
fi
if [ "$#" -eq 1 ]; then
    if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
	$JAVA_HOME/bin/java -cp defexts-core-1.0.0.jar org.mudebug.defexts.main.Main $DIR/../database-kotlin "$@"
	exit 0
    else
	echo "fatal: unexpected argument $1"
	exit 1
    fi
fi
if [ "$1" == "-k" ] || [ "$1" == "--kotlin" ]; then
    $JAVA_HOME/bin/java -cp defexts-core-1.0.0.jar org.mudebug.defexts.main.Main $DIR/../database-kotlin "${@:2}"
elif [ "$1" == "-g" ] || [ "$1" == "--groovy" ]; then
    $JAVA_HOME/bin/java -cp defexts-core-1.0.0.jar org.mudebug.defexts.main.Main $DIR/../database-groovy "${@:2}"
else
    echo "fatal: invalid dataset identifier"
    echo "As the first parameter, you can use:"
    echo "     -k or --kotlin to access Kotlin dataset."
    echo "     -g or --groovy to access Groovy dataset."
    exit 1
fi
